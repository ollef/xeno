{-# language DeriveFoldable #-}
{-# language DeriveFunctor #-}
{-# language DeriveTraversable #-}
module Main where

import Data.List
import Data.Maybe
import Data.Word

safeTail :: [a] -> [a]
safeTail [] = []
safeTail (_:bs) = bs

data CaseTree v l
  = Case v [(l, CaseTree v l)]
  | Done
  deriving (Eq, Ord, Show, Functor, Foldable, Traversable)

match :: Eq l => [v] -> [[l]] -> CaseTree v l
match _ [[]] = Done
match _ [] = Done
match vs lss = do
  let ls = nub [l | l:_ <- lss]
      v = head vs
      vs' = tail vs
      brs = do
        l <- ls
        let lClauses = filter ((== Just l) . listToMaybe) lss
            lss' = safeTail <$> lClauses
        return (l, match vs' lss')
  Case v brs

prettyInterval :: String -> Word8 -> Word8 -> String
prettyInterval x start end
  | start == end = show start
  | otherwise = "_ | " ++ show start ++ " <= " ++ x ++ " && " ++ x ++ " <= " ++ show end

pretty :: (Int -> String) -> Int -> CaseTree String (Word8, Word8) -> String
pretty k depth Done = k depth
pretty k depth (Case v brs) = "case " ++ v ++ " of\n" ++ intercalate "\n"
  [replicate (depth * 2 + 2) ' ' ++ prettyInterval v start end ++ " -> " ++ pretty k (depth + 1) t | ((start, end), t) <- brs]
  ++ "\n" ++ replicate (depth * 2 + 2) ' ' ++ "_ -> " ++ k 0

main :: IO ()
main = do
  putStrLn
    $ pretty (\depth -> if depth == 0 then "index" else "parseName' str (index + " ++ show depth ++")") 0
    $ match ["b1", "b2", "b3", "b4"]
    [ [(58, 58)]
    , [(65, 90)]
    , [(95, 95)]
    , [(97, 122)]
    , [(195, 195), (128, 150)]
    , [(195, 195), (152, 182)]
    , [(195, 195), (184, 191)]
    , [(196, 203), (128, 191)]
    , [(205, 205), (176, 189)]
    , [(205, 205), (191, 191)]
    , [(206, 223), (128, 191)]
    , [(224, 224), (160, 191), (128, 191)]
    , [(225, 225), (128, 191), (128, 191)]
    , [(226, 226), (128, 128), (140, 141)]
    , [(226, 226), (129, 129), (176, 191)]
    , [(226, 226), (130, 133), (128, 191)]
    , [(226, 226), (134, 134), (128, 143)]
    , [(226, 226), (176, 190), (128, 191)]
    , [(226, 226), (191, 191), (128, 175)]
    , [(227, 227), (128, 128), (129, 191)]
    , [(227, 227), (129, 191), (128, 191)]
    , [(228, 236), (128, 191), (128, 191)]
    , [(237, 237), (128, 159), (128, 191)]
    , [(239, 239), (164, 182), (128, 191)]
    , [(239, 239), (183, 183), (128, 143)]
    , [(239, 239), (183, 183), (176, 191)]
    , [(239, 239), (184, 190), (128, 191)]
    , [(239, 239), (191, 191), (128, 189)]
    , [(240, 240), (144, 191), (128, 191), (128, 191)]
    , [(241, 242), (128, 191), (128, 191), (128, 191)]
    , [(243, 243), (128, 175), (128, 191), (128, 191)]
    ]

  putStrLn ""
  putStrLn "----------------------------------------"
  putStrLn ""

  putStrLn
    $ pretty (\depth -> if depth == 0 then "index" else "parseName' str (index + " ++ show depth ++")") 0
    $ match ["b1", "b2", "b3", "b4"]
    [[(58, 58)]
    , [(65, 90)]
    , [(95, 95)]
    , [(97, 122)]
    , [(195, 195), (128, 150)]
    , [(195, 195), (152, 182)]
    , [(195, 195), (184, 191)]
    , [(196, 203), (128, 191)]
    , [(205, 205), (176, 189)]
    , [(205, 205), (191, 191)]
    , [(206, 223), (128, 191)]
    , [(224, 224), (160, 191), (128, 191)]
    , [(225, 225), (128, 191), (128, 191)]
    , [(226, 226), (128, 128), (140, 141)]
    , [(226, 226), (129, 129), (176, 191)]
    , [(226, 226), (130, 133), (128, 191)]
    , [(226, 226), (134, 134), (128, 143)]
    , [(226, 226), (176, 190), (128, 191)]
    , [(226, 226), (191, 191), (128, 175)]
    , [(227, 227), (128, 128), (129, 191)]
    , [(227, 227), (129, 191), (128, 191)]
    , [(228, 236), (128, 191), (128, 191)]
    , [(237, 237), (128, 159), (128, 191)]
    , [(239, 239), (164, 182), (128, 191)]
    , [(239, 239), (183, 183), (128, 143)]
    , [(239, 239), (183, 183), (176, 191)]
    , [(239, 239), (184, 190), (128, 191)]
    , [(239, 239), (191, 191), (128, 189)]
    , [(240, 240), (144, 191), (128, 191), (128, 191)]
    , [(241, 242), (128, 191), (128, 191), (128, 191)]
    , [(243, 243), (128, 175), (128, 191), (128, 191)]
    , [(45, 45)]
    , [(46, 46)]
    , [(48, 57)]
    , [(194, 194), (183, 183)]
    , [(204, 204), (128, 191)]
    , [(205, 205), (128, 175)]
    , [(226, 226), (128, 128), (191, 191)]
    , [(226, 226), (129, 129), (128, 128)]
    ]
